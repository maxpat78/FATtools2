Advantages of common_getattr & pack technique in respect of property():
- defer unpacking at effective access time
- unpack *once* only what needed
- pack *once* the full buffer

BUGS/TODO: (disk.py)
optimize SetFilePointer speed due to 64-bit upgrading?
reduce real disk seeking with a variable to track disk position and avoid calling system seek?


BUGS/TODO: (FAT.py)
- Dirtable.iterator: provide a way to optionally iterate on (already) cached entries w/o accessing to disk again?
- Chain size: since a chain can legally have clusters allocated but not assigned to disk contents (i.o.w. real file size < allocated chain size), effective chain length SHOULD be tested always at first access, not relying upon passed file size?
- strategies in RLE map compactors: sort by reversed size or offset
- caching with simpler dict {start_sector: [decoded_values]} ?
- open w/ full path like opendir? (exFAT too)
- pack & co.: update str += str with list join?
- update FAT32 FSInfo?
- parameters {} to tune cluster allocator?
- generalize pack() in utils.py


BUGS/TODO: (exFAT.py)
- mkdirs?
- implement set/clear Label (FAT too)
- update space and cluster stats in boot sector?
BITMAP:
- bitmap is FATted, so it's slower: dict{pos:QWORD}?
- defer Bitmap file update (allocation is really showed already by slot or FAT)?
OTHER:
- parameters {} to tune cluster allocator?
- generalize pack() in utils.py


BUGS/TODO: (Reorder.pyw)
exclude . and .. from subdirs?
use U D T button and eventually other accelerators?
